{"version":3,"sources":["form/resources/form-validation.js","form/assets/Email.js","form/assets/Subject.js","form/assets/Text.js","form/index.js","App.js","serviceWorker.js","index.js"],"names":["validateForm","event","field","target","value","length","style","borderBottomColor","classList","remove","add","type","indexOf","validateEmail","document","querySelectorAll","querySelector","disabled","Email","react_default","a","createElement","Fragment","htmlFor","id","onBlur","React","Component","Subject","Text","className","From","assets_Email","assets_Subject","assets_Text","App","src_form_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAkCeA,MAlCf,SAAsBC,GACpB,IAWqBC,KAVPD,EAAME,QAWVC,MAAMC,OAAS,GACvBH,EAAMI,MAAMC,kBAAoB,QAChCL,EAAMM,UAAUC,OAAO,WAEvBP,EAAMI,MAAMC,kBAAoB,MAChCL,EAAMM,UAAUE,IAAI,UAfI,UAAtBT,EAAME,OAAOQ,MAmBnB,SAAuBT,IAEW,IADhBA,EAAME,MACRQ,QAAQ,MACpBV,EAAMI,MAAMC,kBAAoB,QAChCL,EAAMM,UAAUC,OAAO,WAEvBP,EAAMI,MAAMC,kBAAoB,MAChCL,EAAMM,UAAUE,IAAI,UAzBpBG,CAAcZ,EAAME,QAGA,IADbW,SAASC,iBAAiB,UACxBV,SACTS,SAASE,cAAc,gBAAgBC,UAAW,ICOvCC,mLATX,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,SAAf,OACAJ,EAAAC,EAAAC,cAAA,SAAOG,GAAG,QAAQC,OAASzB,EAAeW,KAAK,kBALnCe,IAAMC,WCWXC,mLATX,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,WAAf,YACAJ,EAAAC,EAAAC,cAAA,SAAOG,GAAG,UAAUC,OAASzB,EAAeW,KAAK,iBALnCe,IAAMC,WCWbE,mLATX,OACEV,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,aAAf,YACAJ,EAAAC,EAAAC,cAAA,YAAUG,GAAG,YAAYC,OAASzB,EAAe8B,UAAU,2BALhDJ,IAAMC,WC2BVI,mLApBX,OACEZ,EAAAC,EAAAC,cAAA,WAASS,UAAU,kBACjBX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,UAChBX,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,QAAMS,UAAU,QACdX,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACbX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cAAcb,UAAW,GAA3C,QACAE,EAAAC,EAAAC,cAAA,UAAQS,UAAU,gBAAlB,mBAdOJ,IAAMC,WCCVQ,MANf,WACE,OACEhB,EAAAC,EAAAC,cAACe,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAAS9B,SAAS+B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9cf65319.chunk.js","sourcesContent":["function validateForm(event) {\r\n  let errors;\r\n  validateLengh(event.target);\r\n  if (event.target.type === \"email\") {\r\n    validateEmail(event.target);\r\n  }\r\n  errors = document.querySelectorAll(\".error\");\r\n  if (errors.length === 0) {\r\n    document.querySelector(\".send-button\").disabled = false;\r\n  }\r\n}\r\n\r\nfunction validateLengh(field) {\r\n  if (field.value.length > 0) {\r\n    field.style.borderBottomColor = \"green\";\r\n    field.classList.remove(\"error\");\r\n  } else {\r\n    field.style.borderBottomColor = \"red\"\r\n    field.classList.add(\"error\");\r\n  }\r\n}\r\n\r\nfunction validateEmail(field) {\r\n  let emailText = field.value;\r\n  if (emailText.indexOf(\"@\") !== -1) {\r\n    field.style.borderBottomColor = \"green\";\r\n    field.classList.remove(\"error\");\r\n  } else {\r\n    field.style.borderBottomColor = \"red\";\r\n    field.classList.add(\"error\");\r\n  }\r\n}\r\n\r\n\r\nexport default validateForm;","import React from \"react\";\r\n\r\nimport validateForm from \"../resources/form-validation\";\r\n\r\nclass Email extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <label htmlFor=\"email\">To:</label>\r\n        <input id=\"email\" onBlur={ validateForm } type=\"email\"></input>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Email;","import React from \"react\";\r\n\r\nimport validateForm from \"../resources/form-validation\";\r\n\r\nclass Subject extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <label htmlFor=\"subject\">Subject:</label>\r\n        <input id=\"subject\" onBlur={ validateForm } type=\"text\"></input>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Subject;","import React from \"react\";\r\n\r\nimport validateForm from \"../resources/form-validation\";\r\n\r\nclass Text extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <label htmlFor=\"user-text\">Message:</label>\r\n        <textarea id=\"user-text\" onBlur={ validateForm } className=\"form_user-text\"></textarea>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Text;","import React from \"react\";\r\n\r\nimport \"./skeleton.sass\";\r\nimport \"./index.sass\";\r\n\r\nimport Email from \"./assets/Email\";\r\nimport Subject from \"./assets/Subject\";\r\nimport Text from \"./assets/Text\";\r\n\r\nclass From extends React.Component {\r\n  render() {\r\n    return(\r\n      <section className=\"main-container\">\r\n        <header className=\"header\">\r\n          <h2>Send New Email</h2>\r\n        </header>\r\n        <form className=\"form\">\r\n          <Email></Email>\r\n          <Subject></Subject>\r\n          <Text></Text>\r\n          <div></div>\r\n          <div className=\"buttons\">\r\n            <button className=\"send-button\" disabled={ true }>send</button>\r\n            <button className=\"reset-button\">reset</button>\r\n          </div>\r\n        </form>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default From;","import React from 'react';\n\nimport Form from \"./form/index\";\n\nfunction App() {\n  return (\n    <Form></Form>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}